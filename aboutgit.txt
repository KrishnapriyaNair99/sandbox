			*******GIT BASICS******
1. Working offline

Some version control applications popular in the past like CVS and SubVersion used the concept of central repository accessible somewhere in the network where all the changes needed to be commited.
Git uses the concept of local repository where you have a copy of the “complete repository” of your project. You can commit the changes you make to the files of your project to the local repository. So Git allows you to work completely offline, i.e. even when you do not have access to a remote repository.
Later you can synchronize or sharing the changes you made when you have online access to the remote repository.


2.Fast to Work With

Most of the Git operations are fast, mainly because they are performed on your local repository copy.


3.Moving or Adding files

If you want to move a file inside your repository Git automatically track the moves. This was not possible in old version control applications like CVS. Moving a file would typically require to create a new file and remove the old one, thus losing the changes history.Also if you want to add only certain files with some extension with Git you can use wildcards. For example to add only .php files you can run:
git add '*.php'


4.Ignore Certain Files

Sometimes you have files being generated by your project, like for instance log files or files generated by your IDE, that you do not want to store in project repository because they are not really part of your source code.
You can tell Git to ignore certain files in the local repository directories using a file named .gitignore. The files listed in .gitignore are excluded from the version control process as if they are not there. You can share those rules committing the file or just keep it locally.


5.Branches

Sometimes you need to work on new experimental features without interfering with the main code of your project.
You can achieve this by creating new branches to try the code of those experimental features.
Branches also allow different developers to work on different features without interfering with each other work. Then when the features are ready, they can merge the branch changes in the main branch.

6.Check the Status of Your Changes

Check the status of the changes you made to your repository is pretty straightforward. The git status command lets you see what would happen if you committed your changes at a given moment. It can help to avoid the mistakes of using different externals branches of your project.

7.Stash Branches

If you are working on a branch of your project but you do not want to commit the changes, you can save the current status of that branch to return to it in the future. You can switch your work to another branch and insert the stashed modification in it. 

With git stash command, you can save the current status. With git stash pop command you will apply the stashed modifications.

8.Cherry Pick Changes from Branches

Git allows to pick one commit from some branch and apply it into the current branch. This operation is helpful for testing purposes. Imagine you want to test some temporary modification or pick some commits done in other branches.

9.Find version that Introduced a bug using Binary Search

If you have an issue in your code and you want to know when it was introduced and what it is, with the git bisect command you could go back to every commit till you will find the bad one one which the issue was introduced. You can learn more about this on the documentation about Git tools for debugging.

10.Conclusion

In this part of the article we learned about some important features of Git that benefit your project development process and often are advantages when comparing to other version control applications.

In the next part we will cover more advance features that Git provides like collaboration between developers, using existing Web platforms that support Git and migrating repositories from other version control systems.

If you liked this article or you have questions about the topics covered here, post a comment here.
